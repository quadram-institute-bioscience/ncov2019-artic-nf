// Illumina specific params

params {
    //Trim reads
    readTrimming = false

    // Instead of using the ivar-compatible bed file in the scheme repo, the
    // full path to a previously-created ivar bed file. Must also supply
    // ref.
    bed = false

    // Instead of indexing the reference file in the scheme repo, the prefix
    // of previously-created reference index files. Must also supply bed.
    // (With these defined, none of the scheme* variables will be used.)
    ref = false


    fixBed = false
    // illumina fastq search path
    illuminaSuffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}', '*_R{1,2}_001_val_{1,2}' ]
    fastq_exts = ['.fastq.gz', '.fq.gz', '.fastq', '.fq']

    fastqSearchPath = makeFastqSearchPath( params.illuminaSuffixes, params.fastq_exts )
    
    lib_name = find_library_name(params.directory) ? find_library_name(params.directory) : params.prefix
    //Are fastq files kept separately 4 lanes?
    fourLanes = false

    // Use cram input instead of fastq files
    cram = false

    // Allow reads that don't have primer sequence? Ligation prep = false, nextera = true
    allowNoprimer = true

    // Length of illumina reads to keep after primer trimming
    illuminaKeepLen = 35

    // Sliding window quality threshold for keeping reads after primer trimming (illumina)
    illuminaQualThreshold = 20

    // Mpileup depth for ivar
    mpileupDepth = 100000

    // iVar frequency threshold for consensus variant (ivar consensus: -t)
    ivarFreqThreshold = 0.75

    // Minimum coverage depth to call variant (ivar consensus: -m; ivar variants -m)
    ivarMinDepth = 10

    // iVar frequency threshold to call variant (ivar variants: -t )
    ivarMinFreqThreshold = 0.25

    // iVar minimum mapQ to call variant (ivar variants: -q)
    ivarMinVariantQuality = 20

}

def makeFastqSearchPath ( illuminaSuffixes, fastq_exts ) {
    //if (! params.directory ) {
    //    println("Please supply a directory containing fastqs with --directory")
    //    System.exit(1)
    //}

    if ( params.directory ) {
      def fastq_searchpath = []
      for (item in illuminaSuffixes){
          for(thing in fastq_exts){
              fastq_searchpath.add(params.directory.toString() + '/**' + item.toString() + thing.toString())
          }
      }
      return fastq_searchpath
    }
}

def find_library_name(path) {
    //Extract library name 210408_NB501061_0057_AHN232AFX2 from the full path "/qib/platforms/Informatics/transfer/
    //incoming/QIB_Sequencing/Nextseq_2_runs/210408_NB501061_0057_AHN232AFX2/deplexed-zero-mismatch/basecall/REACT"
    def splitted_path = path.split("/")
    def lib_name = splitted_path.findAll {it =~ /^2[0-9]{5}_NB/}
    def name = lib_name.size() > 0 ? lib_name[0] : false
    return name
}